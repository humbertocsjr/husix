Imports System
Imports System.Drawing
Imports System.Threading

Module Program
    Public Sub Main(args as String)
        VGA.Mode640x480x2
        Video.ClearScreen Colors.Black()
        While 1 Thread.Yield
    End
End

Module VGA
    Dim Video as VideoMode

    Public Sub Mode640x480x2
        asm "mov ax, 0x11"
        asm "int 0x10"
        Video.Width = 640
        Video.Height = 480
        Video.Colors = 2
        Video.DrawPixel = AddressOf(DrawPixel)
        GenericVideo.RegisterDrawLine Video
        GenericVideo.RegisterDrawEllipse Video
        Video.DrawRectangle = AddressOf(DrawRectangle)
        Video.ClearScreen = AddressOf(ClearScreen)
        Graphics.ModeManual Video
        GenericVideo.Register2ColorsPalette
    End

    Sub DrawPixel(mode as VideoMode, x as UInt16, y as UInt16, color as UInt16)
        If x >= mode.Width Then Return
        If y >= mode.Height Then Return
        asm "mov ax, 0xa000"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov cx, [bp+10]"
        asm "and cx, 7"
        asm "inc cx"
        asm "mov ax, [bp+14]"
        asm "and ax, 1"
        asm "je .inverte"
        asm "ror al, cl"
        asm "es or [di], al"
        asm "jmp .fim"
        asm ".inverte:"
        asm "ror al, cl"
        asm "not ax"
        asm "es and [di], al"
        asm ".fim:"
    End

    Sub ByteAndOr(mode as VideoMode, x as UInt16, y as UInt16, valueAnd as UInt8, valueOr as UInt8)
        asm "mov ax, 0xa000"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "es and [di], al"
        asm "mov ax, [bp+16]"
        asm "es or [di], al"
    End

    Sub ByteSet(mode as VideoMode, x as UInt16, y as UInt16, value as UInt8, len as UInt16)
        asm "mov ax, 0xa000"
        asm "mov es, ax"
        asm "mov ax, [bp+12]"
        asm "mov bx, 80"
        asm "mul bx"
        asm "mov bx, [bp+10]"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "shr bx, 1"
        asm "add ax, bx"
        asm "mov di, ax"
        asm "mov ax, [bp+14]"
        asm "mov cx, [bp+16]"
        asm "cld"
        asm "rep stosb"
    End

    Sub DrawRectangle(mode as VideoMode, x1 as UInt16, y1 as UInt16, x2 as UInt16, y2 as UInt16, borderColor as UInt16, backgroundColor as UInt16)
        Dim y as UInt16
        Dim x as UInt16
        Dim comp as Int16
        Dim tmp as UInt16
        Dim tmpor as UInt8
        Dim tmpand as UInt8
        Dim diff as UInt16
        comp = (x1 and 7) - (x2 and 7)
        diff = 0
        if comp == 0 then diff = -1
        if comp < 0 then diff = -1
        tmpor = 0
        tmpand = 0xff
        tmp = 7 - (x1 and 7)
        For x = 0 to tmp
            If x == tmp Then
                tmpand = tmpand or ((1 shl x))
                If borderColor and 1 Then
                    tmpor  = tmpor or ((1 shl x))
                End
            Else
                If backgroundColor <> 0xffff Then
                    tmpand = tmpand or ((1 shl x))
                    If backgroundColor and 1 Then
                        tmpor  = tmpor or ((1 shl x))
                    End
                End
            End
        End
        tmpand = not tmpand
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x1, y, tmpand, tmpor
        End
        If backgroundColor <> 0xffff Then
            If backgroundColor and 1 Then
                tmpand = 0xff
            Else
                tmpand = 0
            End
            For y = y1 to y2
                ByteSet mode, x1 + 8, y, tmpand, ((x2 - x1) SHR 3) + diff
            End
        End

        tmpor = 0
        tmpand = 0xff
        tmp = x2 and 7
        For x = 0 to tmp
            If x == tmp Then
                tmpand = tmpand or ((128 shr x))
                If borderColor and 1 Then
                    tmpor  = tmpor or ((128 shr x))
                End
            Else
                If backgroundColor <> 0xffff Then
                    tmpand = tmpand or ((128 shr x))
                    If backgroundColor and 1 Then
                        tmpor  = tmpor or ((128 shr x))
                    End
                End
            End
        End
        For y = y1 + 1 to y2 - 1
            ByteAndOr mode, x2, y, tmpand, tmpor
        End
        tmpor = 0
        tmpand = 0xff
        tmp = 7 - (x1 and 7)
        For x = 0 to tmp
            tmpand = tmpand or ((1 shl x))
            If borderColor and 1 Then
                tmpor  = tmpor or ((1 shl x))
            End
        End
        ByteAndOr mode, x1, y1, tmpand, tmpor
        ByteAndOr mode, x1, y2, tmpand, tmpor
        tmpor = 0
        tmpand = 0xff
        tmp = x2 and 7
        For x = 0 to tmp
            tmpand = tmpand or ((128 shr x))
            If borderColor and 1 Then
                tmpor  = tmpor or ((128 shr x))
            End
        End
        ByteAndOr mode, x2, y1, tmpand, tmpor
        ByteAndOr mode, x2, y2, tmpand, tmpor
        If borderColor and 1 Then
            tmpand = 0xff
        Else
            tmpand = 0
        End
        ByteSet mode, x1 + 8, y1, tmpand, ((x2 - x1) SHR 3) + diff
        ByteSet mode, x1 + 8, y2, tmpand, ((x2 - x1) SHR 3) + diff
    End

    Sub ClearScreen(mode as VideoMode, color as UInt16)
        Dim tmp as UInt8
        Dim y as UInt16
        If color and 1 Then
            tmp = 0xff
        Else
            tmp = 0
        End
        For y = 0 to 479
            ByteSet mode, 0, y, tmp, 80
        End
    End

End