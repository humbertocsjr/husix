Imports System
Imports System.IO
Imports System.IO.Console
Imports System.IO.File

' Representa uma tarefa, função próxima do .Net
Structure Thread
    Spacing 33
    Dim Name as PtrByteArray
    Dim Id as UInt16
    Dim Active as UInt16
    Dim Suspended as UInt16
    Dim NewStack as UInt16
    Dim Allocated as UInt16
    Dim Action as Action(Of Thread)
    Dim StackSegment as UInt16
    Dim StackPointer as UInt16
    Dim Next as PtrByteArray
    Dim Previous as PtrByteArray
    Dim WorkDirectory as PtrByteArray
    Dim WaitReturnCode as UInt16
    Dim ReturnCode as UInt16
End

' Representa um semaforo, serve para limitar o acesso simultaneo a um recurso/rotina
Structure Semaphore
    Dim Count as UInt16
    Dim Limit as UInt16
End

Public Module Semaphore
    ' Deve ser chamado para criar um Semaforo, informando o limite de acessos simultaneos
    Public Sub Initialize(s as Semaphore, limit as UInt16)
        s.Count = 0
        s.Limit = limit
    End

    ' Chamado para esperar uma vaga no semaforo, permite a execução apenas após uma vaga ser liberada por outro processo
    Public Sub WaitOne(s as Semaphore)
        waiting:
        While s.Count >= s.Limit
            Thread.Yield
        End
        asm "pushf"
        asm "cli"
        If s.Count >= s.Limit Then
            asm "popf"
            Goto waiting
        End
        s.Count++
        asm "popf"
    End

    ' DEVE ser chamado sempre ao final de uma rotina onde teve um WaitOne, esta rotina que libera o semaforo, caso esqueça de chama-lo em algum retorno da função, haverá o travamento da rotina que chama o WaitOne por falta de vagas, não sendo mais executada a partir dai
    Public Sub Release(s as Semaphore)
        asm "pushf"
        asm "cli"
        If s.Count > 0 Then s.Count--
        asm "popf"
    End
End

' Uso interno, gerencia, efetua a troca automatizada das tarefas simultãneas
Module MultiThreading
    Dim Active as UInt16
    Dim List as PtrByteArray
    Public Pointer Dim Current as Thread
    Public Dim KernelThread as Thread
    Dim InUse as Semaphore

    Public Sub PreInitialize
        ' Chama antes da GlobalMemory
        Active = 0
        KernelThread.Id = 1
    End

    Public Sub Initialize
        List = Memory.Alloc(SizeOf(Thread) * 128)
        Dim i as UInt16
        Dim ptr as PtrByteArray
        Dim ptrZero as PtrByteArray
        #ptrZero = 0
        @ptrZero = 0
        Dim t as Thread
        For i = 1 to 128
            ptr = Item(i)
            t = ptr
            ptr = 32
            t.Name = t
            String.Copy t.Name, ""
            t.Id = i
            t.Active = 0
            t.Suspended = 1
            t.NewStack = 0
            t.Next = t
            t.Previous = t
            t.WorkDirectory = ptrZero
            If i == 1 Then
                #KernelThread = #ptr
                @KernelThread = @ptr
                #Current = #ptr
                @Current = @ptr
                Current.Next = ptr
                Current.Previous = ptr
                String.Copy Current.Name, "husix"
            End
        End
        Semaphore.Initialize InUse, 1
        KernelThread.Active = 1
        KernelThread.Suspended = 0
        IO.RegisterHandler 0x81, AddressOf(Int81)

    End

    Dim Int81Temp as PtrByteArray

    Sub Int81(ss as UInt16, sp as UInt16) Handles Interrupt
        ' DONT ADD STACK VARS TO THIS ROUTINE
        ' NAO DECLARE VARIAVEIS NESSA ROTINA
        If @Current.Next == 0 Then Current.Next = KernelThread
        Current.StackSegment = ss
        Current.StackPointer = sp
        find_next:
        Int81Temp = Current.Next
        Current = Int81Temp
        ss = Current.StackSegment
        sp = Current.StackPointer
        'Console.Write " >"
        'Console.WriteUInt16 Current.Id
        'Console.Write Current.Name
        If Current.Suspended Then Goto find_next
        If Current.NewStack Then
            Current.NewStack = 0
            Int81Temp = Current.Action
            asm "mov ax, [bp+2]"
            asm "mov bx, [bp+4]"
            asm "cli"
            asm "mov ss, ax"
            asm "mov sp, ax"
            asm "sti"
            asm "push cs"
            asm "mov ax, _thread_endthread"
            asm "push ax"
            asm "pushf"
            asm "cs push word [_multithreading_int81temp+2]"
            asm "cs push word [_multithreading_int81temp]"
            asm "mov ax, ss"
            asm "mov es, ax"
            asm "mov ds, ax"
            asm "jmp FIM_multithreading_int81"
        End
    End

    ' Usado pelo Thread para requisitar uma nova tarefa para uso
    Public Function RequestNew() as PtrByteArray
        Dim ptr as PtrByteArray
        Dim t as Thread
        Dim i as UInt16
        Semaphore.WaitOne InUse
        For i = 1 To 128
            t = Item(i)
            If t.Active == 0 Then
                String.Copy t.Name, ""
                t.Active = 1
                t.Suspended = 1
                t.Allocated = 0
                t.WaitReturnCode = 0
                Semaphore.Release InUse
                Return t
            End
        End
        Semaphore.Release InUse
        Throw CapacityOverflowError
    End

    ' Lista uma Thread
    Public Function Item(i as UInt16) as PtrByteArray
        Dim ptr as PtrByteArray
        i --
        If i >= 128 Then Throw NotFoundError
        ptr = List
        @ptr = @ptr + (i * SizeOf(Thread))
        Return ptr
    End

    Public Function Capacity() as UInt16
        Return 128
    End

    ' Retorna a quantidade de Threads executando
    Public Function Count() as UInt16
        Dim ptr as PtrByteArray
        Dim t as Thread
        Dim i as UInt16
        Dim ret as UInt16
        ret = 0
        For i = 1 To 128
            ptr = Item(i)
            #t = #ptr
            @t = @ptr
            If t.Active <> 0 Then ret++
        End
        Return ret
    End

    ' Inicia uma Thread gerada pelo RequestNew (USO INTERNO)
    Public Sub StartThread(t as Thread)
        Dim status as UInt16
        status = IsActive()
        If status Then Suspend
        t.Next = KernelThread.Next
        KernelThread.Next = t
        t.Previous = KernelThread
        If status Then Resume
    End

    ' Retorna se a troca de tarefas automaticamente esta ativa
    Public Function IsActive() as UInt16
        Return Active
    End

    ' Suspende a multitarefa
    Public Sub Suspend
        Active = 0
    End

    ' Reativa a multitarefa
    Public Sub Resume
        Active = 1
    End
End

Public Module Thread
    ' Solitita uma tarefa nova
    Public Function RequestNew() as PtrByteArray
        Return MultiThreading.RequestNew()
    End

    ' Inicia a tarefa solicitada, informando o tamanho da pilha que deve ser reservada e a rotina a ser executada em paralelo
    Public Sub Start(t as Thread, stackSizeKiB as UInt16, workDir as DirectoryInfo, action as PtrByteArray)
        Dim stack as PtrWordArray
        Dim ptr as PtrByteArray
        t.Suspended = 0
        stack = GlobalMemory.AllocKiB(t, stackSizeKiB)
        @stack = (stackSizeKiB * 1024) - 2
        t.StackPointer = @stack
        t.StackSegment = #stack
        t.NewStack = 1
        t.Action = action
        t.WorkDirectory = workDir
        MultiThreading.StartThread t
    End

    ' Uso interno
    Sub EndThread()
        Dim t as Thread
        t = Current()
        If t.WaitReturnCode == 1 Then t.WaitReturnCode = 2
        While t.WaitReturnCode Thread.Yield
        t.Active = 0
        t.Suspended = 1
        While 1 Thread.Yield
    End

    ' Encerra uma tarefa
    Public Sub Abort(t as Thread)
        t.Suspended = 1
        t.Active = 0
    End

    ' Aponta pra tarefa(Thread) atual
    Public Function Current() as PtrByteArray
        Return MultiThreading.Current
    End

    ' Entrega o controle para a proxima tarefa expontaneamente
    Public Sub Yield()
        asm "sti"
        If MultiThreading.IsActive() == 0 Then Return
        asm "int 0x81"
    End

    ' Aguarda X milisegundos (Precisão depende do intervalo do relógio, normalmente ficando em média de 18 vezes por segundo, ou a cada 55 milisegundos apoximadamente de precisão)
    Public Sub Sleep(miliseconds as UInt16)
        Dim oldmili as UInt16
        Dim diff  as UInt16
        oldmili = Clock.TimerMiliSeconds
        While 1
            diff = Clock.TimerMiliSeconds - oldmili
            If diff >= miliseconds Then Return
            Yield
        End
    End

    ' Aguarda X segundos
    Public Sub SleepSeconds(seconds as UInt16)
        Dim oldsec as UInt16
        Dim diff  as UInt16
        oldsec = Clock.TimerSeconds
        While 1
            diff = Clock.TimerSeconds - oldsec
            If diff >= seconds Then Return
            Yield
        End
    End
End

Public Module Process
    Public Sub Start(filename as String, args as String)
        Dim assm as Assembly
        assm = New
        Assembly.LoadAssembly assm, filename
        Assembly.Start assm, args
    End
End