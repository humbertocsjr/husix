Imports System
Imports System.Text

Public Module Console
    Dim SupportLevel as UInt16

    Public Function CanVGA() as UInt16
        Return SupportLevel >= 3
    End

    Public Function CanEGA() as UInt16
        Return SupportLevel >= 2
    End

    Public Function CanCGA() as UInt16
        Return SupportLevel >= 1
    End

    Public Function CanMGA() as UInt16
        Return SupportLevel >= 0
    End

    Public Function CanHercules() as UInt16
        Return SupportLevel == -1
    End

    Public Function CanTextOnly() as UInt16
        Return SupportLevel == 0
    End

    Public Dim VideoCardName as PtrByteArray

    Friend Sub Initialize
        Dim teste as UInt16
        Dim teste2 as UInt16
        SupportLevel = 0
        teste = 0
        teste2 = 0
        VideoCardName = "VGA"
        ' Apenas placas VGA ou superior tem o serviço AH=0x1a
        asm "xor bx, bx"
        asm "mov ah, 0x1a"
        asm "int 0x10"
        asm "mov [bp-2], bx"
        If (teste == 7) OrElse (teste == 8) Then 
            SupportLevel = 3
            Return
        End

        VideoCardName = "EGA"
        ' Apenas placas EGA ou superior tem o serviço AH=0x12
        asm "mov al, 0x12"
        asm "mov bl, 0x10"
        asm "int 0x10"
        asm "mov [bp-2], bx"
        If teste <> 0x10 Then
            SupportLevel = 2
            Return
        End

        ' Apenas placas MDA/Hercules por padrão na BIOS usam Modo 7, as demais normalmente usam Modo 3
        asm "mov ax, 0xf00"
        asm "int 0x10"
        asm "xor ah, ah"
        asm "mov [bp-2], ax"

        If teste <> 7 Then
            VideoCardName = "VGA"
            SupportLevel = 1
        Else
            VideoCardName = "Hercules"
            Dim i as UInt16
            teste = IO.InputByte(0x3ba)
            teste2 = teste
            For i = 1 to 32768
                teste = IO.InputByte(0x3ba)
                ' Detecta Sinal de Reentrancia Vertical
                ' Apenas placas Hercules tem este sinal, MDA original tem o bit setado sempre
                ' e algumas placas similares ao MDA tem o bit zerado sempre
                ' Então para detectar roda um loop grande lendo a porta para ver se o sinal alterna-se
                If (teste and 128) <> (teste2 and 128) Then
                    SupportLevel = -1
                    Return
                End
            End
            VideoCardName = "MGA"
            SupportLevel = 0
        End
    End

    Public Sub Mode80x25x4
        If CanHercules() Then
            IO.SetVideoMode 7
        Else
            IO.SetVideoMode 3
        End
    End

    Public Function Avail() as UInt16
        return IO.ConsoleAvail()
    End

    Public Function ReadChar() as UInt8
        return IO.ConsoleReadChar()
    End

    Public Sub ReadLine(txt as PtrByteArray)
        Dim len as UInt16
        Dim c as UInt16
        Dim pos as UInt16
        len = txt
        @txt++
        c = 0
        pos = 1
        While 1
            c = IO.ConsoleReadChar()
            If c == 13 Then Goto done
            If c == 10 Then Goto done
            If c == 9 Then
                If pos > 1 Then
                    pos--
                    @txt--
                    txt = 0
                    Console.WriteChar 9
                    Console.WriteChar 32
                    Console.WriteChar 9
                End
            Else
                If pos < len Then
                    Console.WriteChar c
                    txt = c
                    pos++
                    @txt++
                End
            End
        End
        done:
        txt = 0
    End

    Public Sub WriteChar(c as UInt8)
        IO.ConsoleWriteChar c
        If c == 10 Then IO.ConsoleWriteChar 13
    End

    Public Sub Write(txt as PtrByteArray)
        Dim len as UInt16
        Dim i as UInt16
        len = txt
        @txt ++
        i = 1
        While (txt > 0) AndAlso (i <= len)
            WriteChar UTF8.ConvertCharToCP437(txt)
            @txt = @txt + UTF8.CharSize(txt)
            i++
        End
    End

    Public Sub WriteEnter()
        WriteChar 13
        WriteChar 10
    End

    Public Sub WriteLine(txt as PtrByteArray)
        Write txt
        WriteEnter
    End

    Public Sub WriteUInt16(nro as UInt16)
        Dim tmp as UInt16
        Dim prox as UInt16
        tmp = nro mod 10
        prox = nro / 10
        If prox > 0 Then WriteUInt16 prox
        WriteChar 48 + tmp
    End

    Public Sub WriteInt16(nro as Int16)
        If nro < 0 Then
            nro = -nro
        End
        WriteUInt16 nro
    End

    Public Sub WriteUInt8(nro as UInt8)
        WriteUInt16 nro
    End

    Public Sub WriteInt8(nro as Int8)
        WriteInt16 nro
    End
End