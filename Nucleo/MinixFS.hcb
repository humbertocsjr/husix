Imports System
Imports System.IO.FileSystem
Imports System.IO.Disk
Imports System.IO.Stream

Structure MinixFSIndex
    Dim Items as UInt16
    Dim Blocks as UInt16
    Dim ItensMapBlocks as UInt16
    Dim BlocksMapBlocks as UInt16
    Dim FirstDataBlock as UInt16
    Dim DataBlockSize as UInt16
    Dim MaxFileSizeLow as UInt16
    Dim MaxFileSizeHigh as UInt16
    Dim Signature as UInt16
    Dim Status as UInt16
End

Structure MinixFSItemRef
    Dim Id as UInt16
    Spacing 30
End

Structure MinixFSItem
    Dim Permissions as UInt16
    Dim UserId as UInt16
    Dim SizeLow as UInt16
    Dim SizeHigh as UInt16
    Dim TimeLow as UInt16
    Dim TimeHigh as UInt16
    Dim GroupId as UInt8
    Dim Links as UInt8
    Dim Zone0 as UInt16
    Dim Zone1 as UInt16
    Dim Zone2 as UInt16
    Dim Zone3 as UInt16
    Dim Zone4 as UInt16
    Dim Zone5 as UInt16
    Dim Zone6 as UInt16
    Dim ZoneIndirect as UInt16
    Dim ZoneDoubleIndirect as UInt16
End

Module MinixFS
    Dim InUse as Semaphore
    Public Sub Initialize
        Dim fs as FileSystem
        fs = FileSystem.RegisterNew("MinixFS")
        fs.Mount = AddressOf(Mount)
        fs.IsMountable = AddressOf(IsMountable)
        Semaphore.Initialize InUse, 1
    End

    Sub ReadBlock(d as DiskInfo, block as PtrByteArray, address as UInt16)
        If address and 0x8000 Then Throw OutOfBoundsError
        Disk.ReadBlock d, block, address shl 1, 0
        @block = @block + 512
        Disk.ReadBlock d, block, (address shl 1) + 1, 0
    End

    Function IsMountable(fs as FileSystem, d as DiskInfo) as UInt16
        Dim buffer as Block1KiB
        Dim index as MinixFSIndex
        buffer = New
        index = buffer
        If d.BlockSize <> 512 Then Return 0
        ReadBlock d, buffer, 1
        If index.Signature <> 5007 Then Return 0
        If index.Blocks >= 0x8000 Then Return 0
        Return 1 
    End

    Sub Mount(fs as FileSystem, mfs as MountedFileSystem)
        Dim buffer as Block1KiB
        Dim ptr as PtrWordArray
        Dim index as MinixFSIndex
        buffer = New
        ptr = buffer
        index = buffer
        If IsMountable(fs, mfs.DiskInfo) == 0 Then Throw InvalidFormatError
        ReadBlock mfs.DiskInfo, ptr, 1
        mfs.Ptr1 = Memory.Alloc(SizeOf(MinixFSIndex))
        mfs.Ptr2 = GlobalMemory.AllocKiB(MultiThreading.KernelThread, 1)
        mfs.Ptr3 = GlobalMemory.AllocKiB(MultiThreading.KernelThread, 1)
        mfs.Ptr4 = Memory.Alloc(SizeOf(Semaphore))
        Semaphore.Initialize mfs.Ptr4, 1
        mfs.Param1 = 32
        mfs.Param2 = 0
        mfs.Param3 = 0
        Memory.Copy mfs.Ptr1, index, SizeOf(MinixFSIndex)
        mfs.GetRoot = AddressOf(GetRoot)
    End

    Sub GetRoot(mfs as MountedFileSystem, dir as DirectoryInfo)
        DirectoryInfo.Initialize dir
        String.Copy dir.Name, ""
        dir.Id = 1
        dir.MountedFileSystem = mfs
        dir.GetDirectoryInfo = AddressOf(GetDirectoryInfo)
        dir.GetFileInfo = AddressOf(GetFileInfo)
    End

    Sub LoadItemMapBlock(mfs as MountedFileSystem, block as Block1KiB, pos as UInt16)
        Dim index as MinixFSIndex
        index = mfs.Ptr1
        pos = pos + 2 + index.ItensMapBlocks + index.BlocksMapBlocks
        If mfs.Param2 <> pos Then
            ReadBlock mfs.DiskInfo, mfs.Ptr2, pos
        End
        Memory.Copy block, mfs.Ptr2, 1024
        mfs.Param2 = pos
    End

    Sub LoadItem(mfs as MountedFileSystem, id as UInt16, item as MinixFSItem)
        Dim block as Block1KiB
        id--
        Semaphore.WaitOne mfs.Ptr4
        block = New
        LoadItemMapBlock mfs, block, id / 32
        @block = @block + ((id mod 32) * 32)
        Semaphore.Release mfs.Ptr4
        Memory.Copy item, block, SizeOf(MinixFSItem)
    End

    Sub ReadBlockFromItem(mfs as MountedFileSystem, item as MinixFSItem, block as Block1KiB, pos as UInt16)
        Dim ptr as PtrWordArray
        Dim blockNum as UInt16 
        If pos < 7 Then
            If pos == 0 Then blockNum = item.Zone0
            If pos == 1 Then blockNum = item.Zone1
            If pos == 2 Then blockNum = item.Zone2
            If pos == 3 Then blockNum = item.Zone3
            If pos == 4 Then blockNum = item.Zone4
            If pos == 5 Then blockNum = item.Zone5
            If pos == 6 Then blockNum = item.Zone6
        Else
            If pos < (7 + 512) Then
                ReadBlock mfs.DiskInfo, block, item.ZoneIndirect
                pos = pos - 7
                ptr = block
                @ptr = @ptr + (pos shl 1)
                blockNum = ptr
            Else
                Throw NotImplementedError
            End
        End
        If blockNum == 0 Then Throw NotFoundError
        ReadBlock mfs.DiskInfo, block, blockNum
    End

    Function GetSubItem(parent as DirectoryInfo, pos as UInt16, outputItem as MinixFSItem, outputRef as MinixFSItemRef) as UInt16
        Dim parentItem as MinixFSItem
        Dim block as Block1KiB
        Dim tmp as MinixFSItemRef
        Dim ptr as PtrByteArray
        Dim mfs as MountedFileSystem
        mfs = parent.MountedFileSystem
        Semaphore.WaitOne InUse ' Try nao suporta multitask
        Try
            parentItem = New
            LoadItem mfs, parent.Id, parentItem
            block = New
            ReadBlockFromItem mfs, parentItem, block, pos / 32
            tmp = block
            @tmp = @tmp + ((pos mod 32) * SizeOf(MinixFSItemRef))
            Memory.Copy outputRef, tmp, SizeOf(MinixFSItemRef)
            If outputRef.Id == 0 Then Throw NotFoundError
            LoadItem mfs, outputRef.Id, outputItem
        Catch Error
            Semaphore.Release InUse
            Return 0
        End
        Semaphore.Release InUse
        Return 0xffff
    End

    Function GetDirectoryInfo(parent as DirectoryInfo, pos as UInt16, output as DirectoryInfo) as UInt16
        Dim i as UInt16
        Dim item as MinixFSItem
        Dim ref as MinixFSItemRef
        Dim counter as UInt16
        Dim ptr1 as PtrByteArray
        Dim ptr2 as PtrByteArray
        item = New
        ref = New
        counter = 0
        For i = 2 to 512
            If GetSubItem(parent, i, item, ref) == 0 Then Return 0
            If item.Permissions and 0x4000 Then
                counter ++
                If counter == pos Then
                    DirectoryInfo.Initialize output
                    output.Id = ref.Id
                    output.MountedFileSystem = parent.MountedFileSystem
                    output.GetDirectoryInfo = AddressOf(GetDirectoryInfo)
                    output.GetFileInfo = AddressOf(GetFileInfo)
                    ptr1 = output.Name
                    @ptr1++
                    ptr2 = ref
                    @ptr2++
                    @ptr2++
                    Memory.Copy ptr1, ptr2, 30
                    @ptr1 = @ptr1 + 30
                    ptr1 = 0
                    Return 1
                End
            End
        End
        Return 0
    End

    Function GetFileInfo(parent as DirectoryInfo, pos as UInt16, output as FileInfo) as UInt16
        Dim i as UInt16
        Dim item as MinixFSItem
        Dim ref as MinixFSItemRef
        Dim counter as UInt16
        Dim ptr1 as PtrByteArray
        Dim ptr2 as PtrByteArray
        item = New
        ref = New
        counter = 0
        For i = 2 to 512
            If GetSubItem(parent, i, item, ref) == 0 Then Return 0
            If item.Permissions and 0x8000 Then
                counter ++
                If counter == pos Then
                    FileInfo.Initialize output
                    output.Id = ref.Id
                    output.Open = AddressOf(Open)
                    output.MountedFileSystem = parent.MountedFileSystem
                    ptr1 = output.Name
                    @ptr1++
                    ptr2 = ref
                    @ptr2++
                    @ptr2++
                    Memory.Copy ptr1, ptr2, 30
                    @ptr1 = @ptr1 + 30
                    ptr1 = 0
                    Return 1
                End
            End
        End
        Return 0
    End

    Sub ReadBlockFromStream(s as Stream, blockNum as UInt16)
        Dim item as MinixFSItem
        item = s.InternalInfo
        Try
            ReadBlockFromItem s.MountedFileSystem, s.InternalInfo, s.Buffer, blockNum
        Catch Error
            s.Position = 0
            s.BufferSize = 0
            Return 
        End
        If (item.SizeHigh == 0) AndAlso ((item.SizeLow / 1024) == 0) Then
            s.BufferSize = item.SizeLow
        Else
            s.BufferSize = 1024
        End
        s.Position = 0
        s.CurrentBlock = blockNum
    End

    Sub Open(file as FileInfo, s as Stream)
        Stream.Initialize s
        s.Id = file.Id
        s.MountedFileSystem = file.MountedFileSystem
        s.ReadRaw = AddressOf(ReadRaw)
        s.LengthLow = AddressOf(LengthLow)
        s.LengthHigh = AddressOf(LengthHigh)
        s.Close = AddressOf(Close)
        s.Buffer = GlobalMemory.AllocKiB(Thread.Current(), 1)
        s.InternalInfo = Memory.Alloc(SizeOf(MinixFSItem))
        LoadItem file.MountedFileSystem, file.Id, s.InternalInfo
        Dim item as MinixFSItem
        item = s.InternalInfo
        If item.Zone0 <> 0 Then
            ReadBlockFromStream s, 0
        End
    End

    Function Close(s as Stream) as UInt16
        'TODO: Desalocar memoria do Buffer e etc
        Return 0xffff
    End

    Function ReadRaw(s as Stream, data as PtrByteArray, len as UInt16) as UInt16
        Dim tmp as PtrByteArray
        Dim i as UInt16
        Dim value as UInt8
        Dim ret as UInt16
        tmp = s.Buffer
        @tmp = @s.Buffer + s.Position
        ret = 0
        For i = 1 to len
            If s.Position >= s.BufferSize Then 
                If s.BufferSize < 1024 Then Return ret
                ReadBlockFromStream s, s.CurrentBlock + 1
                If s.BufferSize == 0 Then Return ret
                @tmp = @s.Buffer + s.Position
            End
            value = tmp
            data = value
            @data++
            @tmp++
            s.Position++
            ret++
        End
        Return ret
    End

    Function LengthLow(s as Stream) as UInt16
        Dim item as MinixFSItem
        item = s.InternalInfo
        Return item.SizeLow
    End

    Function LengthHigh(s as Stream) as UInt16
        Dim item as MinixFSItem
        item = s.InternalInfo
        Return item.SizeHigh
    End

End