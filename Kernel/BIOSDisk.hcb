Imports System
Imports System.IO
Imports System.IO.Disk
Imports System.Threading

Module BIOSDisk
    Pointer Dim FloppyA as DiskInfo
    Pointer Dim FloppyB as DiskInfo
    Dim Buffer as Block512B
    Dim InUse as Semaphore

    Public Sub Initialize
        Semaphore.Initialize InUse, 1
        FloppyA  = Disk.RegisterNew("BIOSDisk000", 0, 40, 2, 9, 512)
        FloppyA.ReadBlock = AddressOf(ReadBlock)
        FloppyA.WriteBlock = AddressOf(WriteBlock)
        FloppyB  = Disk.RegisterNew("BIOSDisk001", 1, 40, 2, 9, 512)
        FloppyB.ReadBlock = AddressOf(ReadBlock)
        FloppyB.WriteBlock = AddressOf(WriteBlock)
    End

    Function CallBIOS(ax as UInt16, bx as UInt16, cx as UInt16, dx as UInt16, es as UInt16) as Int16
        asm "push bp"
        asm "mov ax, [bp+6]"
        asm "mov bx, [bp+8]"
        asm "mov cx, [bp+10]"
        asm "mov dx, [bp+12]"
        asm "push word [bp+14]"
        asm "pop es"
        asm "int 0x13"
        asm "jnc .ok"
        asm "neg ax"
        asm ".ok:"
        asm "pop bp"
    End

    Sub UpdateSize(disk as DiskInfo)
        Dim ptr as PtrByteArray
        Dim value as UInt16
        If disk.InternalId <= 1 then
            ' Le a BIOS Data Area
            #ptr = 0x40
            @ptr = 0x90
            If disk.InternalId == 1 Then @ptr++
            value = ptr and 7
            If (value == 0) OrElse (value == 4) OrElse (value == 1) OrElse (value == 3) Then
                disk.Cylinders = 40
                disk.Sectors = 9
            End
            If (value == 2) OrElse (value == 5) Then
                disk.Cylinders = 80
                disk.Sectors = 15
            End
            If (value == 7) Then
                disk.Cylinders = 80
                disk.Sectors = 18
            End
        End
    End

    Sub ReadBlock(disk as DiskInfo, block as PtrByteArray, positionLow as UInt16, positionHigh as UInt16)
        Dim chs as CHSAddress
        chs = New
        UpdateSize disk
        Disk.ConvertToCHS chs, disk, positionLow, positionHigh
        Dim ret as Int16
        Semaphore.WaitOne InUse
        Dim i as UInt16
        ret = -1
        i = 0
        While (i <= 3) AndAlso ret < 0
            Thread.Yield
            MultiThreading.Suspend
            ret = CallBIOS(0x201, @Buffer, (chs.Cylinder shl 8) + (chs.Sector), (chs.Head shl 8) + disk.InternalId, #Buffer)
            If ret < 0 Then CallBIOS 0,0,0,disk.InternalId, #Buffer
            MultiThreading.Resume
            Thread.Yield '  Garante que vai rodar outras Threads
        End
        Semaphore.Release InUse
        If ret = -3 Then Throw AccessDeniedError
        If ret < 0 Then Throw InvalidValueError
        Memory.Copy block, Buffer, 512
    End

    Sub WriteBlock(disk as DiskInfo, block as PtrByteArray, positionLow as UInt16, positionHigh as UInt16)
        Dim chs as CHSAddress
        chs = New
        UpdateSize disk
        Disk.ConvertToCHS chs, disk, positionLow, positionHigh
        Dim ret as Int16
        Semaphore.WaitOne InUse
        Dim i as UInt16
        ret = -1
        i = 0
        While (i <= 3) AndAlso ret < 0
            Thread.Yield
            MultiThreading.Suspend
            ret = CallBIOS(0x301, @Buffer, (chs.Cylinder shl 8) + (chs.Sector), (chs.Head shl 8) + disk.InternalId, #Buffer)
            If ret < 0 Then CallBIOS 0,0,0,disk.InternalId, #Buffer
            MultiThreading.Resume
            Thread.Yield '  Garante que vai rodar outras Threads
        End
        Semaphore.Release InUse
        If ret = -3 Then Throw AccessDeniedError
        If ret < 0 Then Throw InvalidValueError
        Memory.Copy block, Buffer, 512
    End
End