Imports System
Imports System.IO
Imports System.IO.Disk
Imports System.Threading

Module BIOSDisk
    Pointer Dim FloppyA360 as DiskInfo
    Pointer Dim FloppyA720 as DiskInfo
    Pointer Dim FloppyA1200 as DiskInfo
    Pointer Dim FloppyA1440 as DiskInfo
    Pointer Dim FloppyB360 as DiskInfo
    Pointer Dim FloppyB720 as DiskInfo
    Pointer Dim FloppyB1200 as DiskInfo
    Pointer Dim FloppyB1440 as DiskInfo
    Dim Buffer as Block512B
    Dim InUse as Semaphore

    Public Sub Initialize
        Semaphore.Initialize InUse, 1
        FloppyA360  = Disk.RegisterNew("BIOSDisk000_360", 0, 40, 2, 9, 512)
        FloppyA360.ReadBlock = AddressOf(ReadBlock)
        FloppyA360.WriteBlock = AddressOf(WriteBlock)
        FloppyA720  = Disk.RegisterNew("BIOSDisk000_720", 0, 40, 2, 18, 512)
        FloppyA720.ReadBlock = AddressOf(ReadBlock)
        FloppyA720.WriteBlock = AddressOf(WriteBlock)
        FloppyA1200 = Disk.RegisterNew("BIOSDisk000_1200", 0, 80, 2, 15, 512)
        FloppyA1200.ReadBlock = AddressOf(ReadBlock)
        FloppyA1200.WriteBlock = AddressOf(WriteBlock)
        FloppyA1440 = Disk.RegisterNew("BIOSDisk000_1440", 0, 80, 2, 18, 512)
        FloppyA1440.ReadBlock = AddressOf(ReadBlock)
        FloppyA1440.WriteBlock = AddressOf(WriteBlock)
        FloppyB360  = Disk.RegisterNew("BIOSDisk001_360", 1, 40, 2, 9, 512)
        FloppyB360.ReadBlock = AddressOf(ReadBlock)
        FloppyB360.WriteBlock = AddressOf(WriteBlock)
        FloppyB720  = Disk.RegisterNew("BIOSDisk001_720", 1, 40, 2, 18, 512)
        FloppyB720.ReadBlock = AddressOf(ReadBlock)
        FloppyB720.WriteBlock = AddressOf(WriteBlock)
        FloppyB1200 = Disk.RegisterNew("BIOSDisk001_1200", 1, 80, 2, 15, 512)
        FloppyB1200.ReadBlock = AddressOf(ReadBlock)
        FloppyB1200.WriteBlock = AddressOf(WriteBlock)
        FloppyB1440 = Disk.RegisterNew("BIOSDisk001_1440", 1, 80, 2, 18, 512)
        FloppyB1440.ReadBlock = AddressOf(ReadBlock)
        FloppyB1440.WriteBlock = AddressOf(WriteBlock)
    End

    Function CallBIOS(ax as UInt16, bx as UInt16, cx as UInt16, dx as UInt16, es as UInt16) as UInt16
        asm "push bp"
        asm "mov ax, [bp+6]"
        asm "mov bx, [bp+8]"
        asm "mov cx, [bp+10]"
        asm "mov dx, [bp+12]"
        asm "push word [bp+14]"
        asm "pop es"
        asm "int 0x13"
        asm "jnc .ok"
        asm "neg ax"
        asm ".ok:"
        asm "pop bp"
    End

    Sub ReadBlock(disk as DiskInfo, block as PtrByteArray, positionLow as UInt16, positionHigh as UInt16)
        Dim chs as CHSAddress
        Disk.ConvertToCHS chs, disk, positionLow, positionHigh
        Dim ret as Int16
        Semaphore.WaitOne InUse
        MultiThreading.Suspend
        ret = CallBIOS(0x201, @Buffer, (chs.Cylinder shl 8) + (chs.Sector), (chs.Head shl 8) + disk.InternalId, #Buffer)
        MultiThreading.Resume
        Semaphore.Release InUse
        If ret < 0 Then Throw InvalidValueError
        Memory.Copy block, Buffer, 512
    End

    Sub WriteBlock(disk as DiskInfo, block as PtrByteArray, positionLow as UInt16, positionHigh as UInt16)
        Dim chs as CHSAddress
        Disk.ConvertToCHS chs, disk, positionLow, positionHigh
        Dim ret as Int16
        Semaphore.WaitOne InUse
        MultiThreading.Suspend
        ret = CallBIOS(0x301, @Buffer, (chs.Cylinder shl 8) + (chs.Sector), (chs.Head shl 8) + disk.InternalId, #Buffer)
        MultiThreading.Resume
        Semaphore.Release InUse
        If ret < 0 Then Throw InvalidValueError
        Memory.Copy block, Buffer, 512
    End
End