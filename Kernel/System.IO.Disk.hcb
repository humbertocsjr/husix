Imports System

Structure Block512B
    Spacing 512
End

Structure Block1KiB
    Spacing 1024
End

Structure Block2KiB
    Spacing 2048
End

Structure CHSAddress
    Dim Cylinder as UInt16
    Dim Head as UInt16
    Dim Sector as UInt16
End

Structure DiskInfo
    Spacing 33 ' Nome 32 bytes de texto e 1 de cabecalho
    Dim Name as PtrByteArray
    Dim InternalId as UInt16
    Dim Cylinders as UInt16
    Dim Heads as UInt16
    Dim Sectors as UInt16
    Dim BlockSize as UInt16
    Dim ReadBlock as Action(Of DiskInfo, PtrByteArray, UInt16, UInt16)
    Dim WriteBlock as Action(Of DiskInfo, PtrByteArray, UInt16, UInt16)
    Dim Param1 as UInt16
    Dim Param2 as UInt16
    Dim Param3 as UInt16
    Dim Param4 as UInt16
    Dim Param5 as UInt16
    Dim Param6 as UInt16
    Dim Param7 as UInt16
    Dim Param8 as UInt16
End

Module Disk
    Dim Disks as List

    Public Sub Initialize
        List.Initialize Disks, SizeOf(DiskInfo)
    End
    
    Public Function RegisterNew(name as String, internalId as UInt16, cylinders as UInt16, heads as UInt16, sectors as UInt16, blockSize as UInt16) as PtrByteArray
        Dim info as DiskInfo 
        Dim ptr as PtrByteArray
        ptr = List.Add(Disks)
        info = ptr
        info.Name = info ' Nome Ã© alocado nos primeiros 33 bytes
        info.InternalId = internalId
        info.Cylinders = cylinders
        info.Heads = heads
        info.Sectors = sectors
        info.BlockSize = blockSize
        info.ReadBlock = AddressOf(GenericReadBlock)
        info.WriteBlock = AddressOf(GenericWriteBlock)
        ptr = 32 ' Tamanho do nome
        String.Copy info.Name, ""
        String.Copy info.Name, name
        Return info
    End

    Public Sub ConvertToCHS(out as CHSAddress, d as DiskInfo, addressLow as UInt16, addressHigh as UInt16)
        Dim sectors as UInt16
        If addressHigh <> 0 Then Throw OutOfBoundsError
        sectors = d.Sectors * d.Heads
        out.Cylinder = addressLow / sectors
        out.Head = (addressLow mod sectors) / d.Sectors
        out.Sector = ((addressLow mod sectors) mod d.Sectors) + 1
    End

    Sub GenericReadBlock(info as DiskInfo, data as PtrByteArray, addressLow as UInt16, addressHigh as UInt16)
        Throw NotImplementedError
    End

    Sub GenericWriteBlock(info as DiskInfo, data as PtrByteArray, addressLow as UInt16, addressHigh as UInt16)
        Throw NotImplementedError
    End

    Function Exist(name as String) as UInt16
        Dim i as UInt16
        For i = 1 to List.Count(Disks)
            Dim d as DiskInfo
            d = List.Item(Disks, i)
            If String.Equals(d.Name, name) Then 
                Return 0xffff
            End
        End
        Return 0
    End

    Function Item(name as String) as DiskInfo
        Dim i as UInt16
        For i = 1 to List.Count(Disks)
            Dim d as DiskInfo
            d = List.Item(Disks, i)
            If String.Equals(d.Name, name) Then Return d
        End
        Throw NotFoundError
    End

    Function Count() as UInt16
        Return List.Count(Disks)
    End

    Function GetBlockSize(name as String) as UInt16
        Dim i as UInt16
        For i = 1 to List.Count(Disks)
            Dim d as DiskInfo
            d = List.Item(Disks, i)
            If String.Equals(d.Name, name) Then Return d.BlockSize
        End
        Throw NotFoundError
    End

    Sub ReadBlock(d as DiskInfo, data as PtrByteArray, addressLow as UInt16, addressHigh as UInt16)
        d.ReadBlock.Invoke data, addressLow, addressHigh
    End

    Sub ReadBlockByName(name as String, data as PtrByteArray, addressLow as UInt16, addressHigh as UInt16)
        Dim i as UInt16
        For i = 1 to List.Count(Disks)
            Dim d as DiskInfo
            d = List.Item(Disks, i)
            If String.Equals(d.Name, name) Then 
                d.ReadBlock.Invoke data, addressLow, addressHigh
                Return
            End
        End
        Throw NotFoundError
    End
End